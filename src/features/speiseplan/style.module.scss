@use '/src/style/mixins';
@use '@sass-fairy/string' as fairystring;
@use 'sass:string';
@use 'sass:color';

$location-colors: (
    'Mensa': #6e894a,
    'Canteen': #6e894a,
    'Cafeteria': #4b6669,
);

$darkmode-brightness-fixes: (
    'sh_teller': 1.5,
    'iconprop_bio': 0.9,
    'streetfood': 1,
);

$max-co2-stars: 3;

:local(.table) {
    .dish {
        &[data-location]::before {
            content: attr(data-location);
            font-weight: bold;
            font-size: smaller;
            padding: 4px;
            border-radius: 6px;
            margin-right: 0.5em;
        }

        @each $location, $color in $location-colors {
            &[data-location='#{$location}']::before {
                background-color: $color;
                @if (color.channel($color, 'lightness', $space: hsl) > 50) {
                    color: black;
                } @else {
                    color: white;
                }
            }
        }

        .dish-additives {
            font-size: smaller;
        }
    }

    .co2-score[data-stars] {
        text-align: center;

        &::before {
            @include mixins.fa-icon;
            background-image: linear-gradient(
                90deg,
                red 0%,
                gold 50%,
                green 100%
            );
            color: transparent;
            background-clip: text;
            display: block;
        }

        @for $i from 1 through $max-co2-stars {
            &[data-stars='#{$i}']::before {
                content: string.quote(
                    fairystring.repeat('\f005', $i) +
                        fairystring.repeat('\f006', $max-co2-stars - $i)
                );
            }
        }
    }

    .dish-types {
        text-align: center;

        img {
            max-width: 40px;
            max-height: 40px;

            @include mixins.darkmode {
                $stroke-pos: 0.5px;
                $stroke-neg: -1 * $stroke-pos;
                --stroke-color: color-mix(
                    in srgb,
                    currentColor 20%,
                    transparent
                );
                filter: drop-shadow($stroke-pos 0 0 var(--stroke-color))
                    drop-shadow($stroke-neg 0 var(--stroke-color))
                    drop-shadow(0 $stroke-neg 0 var(--stroke-color))
                    drop-shadow($stroke-pos $stroke-pos 0 var(--stroke-color))
                    drop-shadow($stroke-pos $stroke-neg 0 var(--stroke-color))
                    drop-shadow($stroke-neg $stroke-pos 0 var(--stroke-color))
                    drop-shadow($stroke-neg $stroke-neg 0 var(--stroke-color));

                @each $type, $brightness in $darkmode-brightness-fixes {
                    &[src*='#{$type}'] {
                        filter: brightness($brightness);
                    }
                }

                @if global.$UNI == 'uzl' or global.$UNI == 'cau' {
                    &[src*='kuechen-klassiker'] {
                        filter: invert(1)
                            saturate(1500%)
                            hue-rotate(230deg)
                            saturate(30%)
                            hue-rotate(300deg);
                        mix-blend-mode: screen;
                    }
                }
            }
        }
    }
}
