name: üìú PR Summary
description: Update or create a PR comment with sectioned content

inputs:
    pr-number:
        description: 'Pull Request number'
        required: true
    section:
        description: 'a unique simple section ID'
        required: true
    title:
        description: 'Section name in HTML format'
        required: true
    content:
        description: 'Section content in Markdown format'
        required: true

runs:
    using: 'composite'
    steps:
        - name: Install GitHub CLI
          shell: bash
          if: ${{ env.ACT && runner.os == 'Linux' }}
          run: |
              (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
                && sudo mkdir -p -m 755 /etc/apt/keyrings \
                && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
                && cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
                && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
                && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
                && sudo apt update \
                && sudo apt install gh -y

        - name: ‚å®Ô∏è  Generate GitHub App Token
          id: generate_token
          uses: tibdex/github-app-token@v2
          with:
              app_id: ${{ secrets.CI_APP }}
              private_key: ${{ secrets.CI_PAT }}

        - name: '‚úèÔ∏è Update or create comment'
          shell: bash
          run: |
              COMMENT_URL=$(gh pr view ${{ inputs.pr-number }} --json comments --jq '[.comments[] | select(.body | startswith("<!-- Better-Moodle PR-Summary -->"))][0] .url')
              TITLE="<summary><h2>${{ inputs.title }}</h2></summary>"
              START_COMMENT="<!-- ${{ inputs.section }} -->"
              END_COMMENT="<!-- >${{ inputs.section }} -->"
              NOW=$(date)
              RUN="Run: [\`${{github.run_id}}/${{github.run_attempt}}\`](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}/attempts/${{github.run_attempt}}) ($NOW)"

              if [ -z "$COMMENT_URL" ]; then
                # this is a way to escape the inputs.content
                CONTENT=$(
                cat <<"EOF"
              ${{ inputs.content }}
              EOF
                )
                gh pr comment ${{ inputs.pr-number }} --body "<!-- Better-Moodle PR-Summary -->
              $START_COMMENT
              <details>
              $TITLE

              $RUN

              $CONTENT
              </details>
              $END_COMMENT"
              else
                COMMENT_ID=$(echo "$COMMENT_URL" | sed 's/.*-\([0-9]*\)$/\1/')
                BODY_FILE=$(mktemp)
                NEW_BODY_FILE=$(mktemp)

                gh pr view ${{ inputs.pr-number }} --json comments --jq ".comments[] | select(.url == \"$COMMENT_URL\") | .body" > "$BODY_FILE"

                # a semaphor that tracks if copying the old body is allowed
                copy=true

                while IFS="" read -r line || [ -n "$line" ]
                do
                if [[ "$line" == "$START_COMMENT" ]]; then
                    copy=false
                fi

                if [[ "$copy" = true ]]; then
                    echo "$line" >> "$NEW_BODY_FILE"
                fi

                if [[ "$line" == "$END_COMMENT" ]]; then
                    copy=true
                fi
                done < "$BODY_FILE"

                # append the new section
                echo "$START_COMMENT
              <details>
              $TITLE

              $RUN

              ${{ inputs.content }}
              </details>
              $END_COMMENT" >> "$NEW_BODY_FILE"
                NEW_BODY=$(cat "$NEW_BODY_FILE")

                gh api --method PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{github.repository}}/issues/comments/"$COMMENT_ID" -f body="$NEW_BODY"
              fi
          env:
              GH_TOKEN: ${{ steps.generate_token.outputs.token }}
